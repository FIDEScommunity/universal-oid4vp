"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2414],{58:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>p,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"openapi/schemas/verifieddata","title":"VerifiedData","description":"This object is only included in case the authorization status is \'authorization_response_verified\'","source":"@site/docs/openapi/schemas/verifieddata.schema.mdx","sourceDirName":"openapi/schemas","slug":"/openapi/schemas/verifieddata","permalink":"/universal-oid4vp/docs/openapi/schemas/verifieddata","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"verifieddata","title":"VerifiedData","description":"This object is only included in case the authorization status is \'authorization_response_verified\'","sidebar_label":"VerifiedData","hide_title":true,"hide_table_of_contents":true,"schema":true,"sample":{"authorization_response":{"presentation_submission":{},"vp_token":{}},"credential_claims":[{"id":"string","type":"string","claims":{}}]},"custom_edit_url":null},"sidebar":"docs","previous":{"title":"VerifiedDataMode","permalink":"/universal-oid4vp/docs/openapi/schemas/verifieddatamode"},"next":{"title":"VerifiedClaimsValue","permalink":"/universal-oid4vp/docs/openapi/schemas/verifiedclaimsvalue"}}');var a=t(74848),n=t(28453),o=t(95730),r=t.n(o),d=t(9303);const p={id:"verifieddata",title:"VerifiedData",description:"This object is only included in case the authorization status is 'authorization_response_verified'",sidebar_label:"VerifiedData",hide_title:!0,hide_table_of_contents:!0,schema:!0,sample:{authorization_response:{presentation_submission:{},vp_token:{}},credential_claims:[{id:"string",type:"string",claims:{}}]},custom_edit_url:null},l=void 0,c={},u=[];function h(e){const i={p:"p",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(d.default,{as:"h1",className:"openapi__heading",children:"VerifiedData"}),"\n",(0,a.jsx)(i.p,{children:"This object is only included in case the authorization status is 'authorization_response_verified'"}),"\n",(0,a.jsx)(r(),{schema:{type:"object",description:"This object is only included in case the authorization status is 'authorization_response_verified'",properties:{authorization_response:{type:"object",properties:{presentation_submission:{type:"object",description:"Object containing information about how the presented credentials fulfill the presentation definition requirements. Only if PE is used!"},vp_token:{oneOf:[{type:"object",title:"SingleObjectVpTokenPE"},{type:"string",title:"SingleStringVpTokenPE"},{type:"array",items:{oneOf:[{type:"object",title:"SingleObjectVpTokenPE"},{type:"string",title:"SingleStringVpTokenPE"}]},title:"MultipleVpTokens"},{type:"object",additionalProperties:{type:"array",items:{oneOf:[{type:"object",title:"SingleObjectVpTokenPE"},{type:"string",title:"SingleStringVpTokenPE"}]},title:"MultipleVpTokens"},title:"MultipleVpTokenDCQL"}],title:"VpToken"}},title:"AuthorizationResponsePayload"},credential_claims:{type:"array",items:{type:"object",description:"Represents a single credential with its claims and type",required:["id","type"],properties:{id:{type:"string",description:"The id of the query. Can be a presentation exchange id, a DCQL query or query set Id. Used by the RP to match the credential against the query"},type:{type:"string",description:"The digital credential type. Can be a vct value, or for instance a json-ld type"},claims:{type:"object",additionalProperties:{type:"string"},description:"The claims returned and deserialized in the form of a map, where the keys represent the claim names"}},title:"VerifiedClaimsValue"}}},title:"VerifiedData"},schemaType:"response"})]})}function m(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);